{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","reset","preventDefault","htmlFor","type","pattern","title","required","onChange","id","Filter","filterInputId","ContactListItem","onDeleteContact","onClick","ContactList","contacts","map","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","className","newContact","find","contact","alert","prevContacts","normalizedFilter","toLowerCase","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43edc372.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\n// import s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n    \r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n \r\n    const nameInputId = shortid.generate();\r\n    const numberInputId = shortid.generate();\r\n\r\n    const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n    reset();\r\n    }\r\n    \r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n    \r\n    return (\r\n        <form\r\n            onSubmit={handleSubmit}>\r\n            <label\r\n                htmlFor={nameInputId}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    id={nameInputId}\r\n                />\r\n            </label>\r\n\r\n            <label\r\n                htmlFor={numberInputId}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    id={numberInputId}\r\n                />\r\n            </label>\r\n\r\n            <button\r\n                type=\"submit\">\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n// import s from './Filter.module.css';\r\n\r\nexport default function Filter({value, onChange}){\r\n\r\n    const filterInputId = shortid.generate();  \r\n        return (\r\n            <label htmlFor={filterInputId}>\r\n                Find contacts by name\r\n                <input\r\n                    type='text'\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    id={filterInputId}\r\n                />\r\n            </label>\r\n        )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};","import PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\r\n    return (\r\n        <li>\r\n            {name} : {number}\r\n            <button\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n        >\r\n            Delete\r\n        </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ContactListItem;\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};","import PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => {\r\n    return (\r\n        <ul>\r\n            {contacts().map(({ id, name, number }) => {\r\n                return (\r\n                    <ContactListItem\r\n                        key={id}\r\n                        id={id}\r\n                        name={name}\r\n                        number={number}\r\n                        onDeleteContact={onDeleteContact}\r\n                    />\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.func.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};","import { useState, useEffect } from 'react';\r\n// import './App.css';\r\nimport shortid from 'shortid';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\n\r\n\r\nfunction App(){\r\n  \r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\r\n  });\r\n  \r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = (name, number) => {\r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    }\r\n\r\n    if (contacts.find(contact => contact.name === newContact.name)) {\r\n      alert(`${newContact.name} is already in contacts.`)\r\n      return;\r\n    }\r\n  \r\n    setContacts(prevContacts => [newContact, ...prevContacts]);\r\n  };\r\n  \r\n   const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n  \r\n  const findContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  const deleteContact = contactId => {\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  };\r\n    \r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">Phonebook</h1>\r\n      <ContactForm onSubmit={addContact} contacts={contacts} />\r\n      <h2 className=\"subtitle\">Contacts</h2>\r\n      <Filter value={filter} onChange={changeFilter} />\r\n      <ContactList\r\n        contacts={findContacts}\r\n        onDeleteContact={deleteContact}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n \r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}